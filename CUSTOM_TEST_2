import keras,os
from keras.models import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Dropout,Flatten
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import MaxPool2D
from keras.optimizers import Adam
from keras.callbacks import ModelCheckpoint, EarlyStopping
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from PIL import Image
import pandas as pd

metadata_train_df = pd.read_csv('training_metadata_10000.csv')

metadata_train_df['benign_malignant'].fillna('benign', inplace=True)
#metadata_train_df['family_hx_mm'].fillna(False, inplace=True)
#metadata_train_df['personal_hx_mm'].fillna(False, inplace=True)
#metadata_train_df['age_approx'].fillna(45, inplace=True)

metadata_train_df['benign_malignant'] = metadata_train_df['benign_malignant'].map({'benign': 0, 'malignant': 1})
#metadata_train_df['family_hx_mm'] = metadata_train_df['family_hx_mm'].map({True: 1, False: 0})
#metadata_train_df['personal_hx_mm'] = metadata_train_df['personal_hx_mm'].map({True: 1, False: 0})


metadata_train_df = metadata_train_df[['benign_malignant', 'isic_id', 'family_hx_mm', 'personal_hx_mm', 'age_approx']]  
metadata_train_df.to_csv('metadata_train_encoded.csv', index=False)

metadata_test_df = pd.read_csv('testing_metadata_30000.csv')

metadata_test_df['benign_malignant'].fillna('benign', inplace=True)
#metadata_test_df['family_hx_mm'].fillna(False, inplace=True)
#metadata_test_df['personal_hx_mm'].fillna(False, inplace=True)
#metadata_test_df['age_approx'].fillna(45, inplace=True)

metadata_test_df['benign_malignant'] = metadata_test_df['benign_malignant'].map({'benign': 0, 'malignant': 1})
#metadata_test_df['family_hx_mm'] = metadata_test_df['family_hx_mm'].map({True: 1, False: 0})
#metadata_test_df['personal_hx_mm'] = metadata_test_df['personal_hx_mm'].map({True: 1, False: 0})

metadata_test_df = metadata_test_df[['benign_malignant', 'isic_id', 'family_hx_mm', 'personal_hx_mm', 'age_approx']]
metadata_test_df.to_csv('metadata_test_encoded.csv', index=False)

metadata_train_dir = pd.read_csv('metadata_train_encoded.csv')
metadata_test_dir = pd.read_csv('metadata_test_encoded.csv')

image_train_dir = 'Training_images_10000'
image_test_dir = 'TESTING_IMAGES'

train_datagen = ImageDataGenerator()
train_data = train_datagen.flow_from_dataframe(
    dataframe=metadata_train_dir,
    directory=image_train_dir,
    x_col="isic_id",
    y_col="benign_malignant",
    class_mode="raw",
    target_size=(224,224),
    batch_size=32
)

test_datagen = ImageDataGenerator()
test_data = test_datagen.flow_from_dataframe(
    dataframe=metadata_test_dir,
    directory=image_test_dir,
    x_col="isic_id",
    y_col="benign_malignant",
    class_mode="raw",
    target_size=(224,224),
    batch_size=32
)

model = Sequential()
model.add(Conv2D(input_shape=(224,224,3),filters=64,kernel_size=(3,3),padding="same", activation="relu"))
model.add(Conv2D(filters=64,kernel_size=(3,3),padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Flatten())
model.add(Dense(units=4096,activation="relu"))
model.add(Dense(units=4096,activation="relu"))
model.add(Dense(units=4096,activation="relu"))
model.add(Dense(units=2, activation="softmax"))
opt = Adam(learning_rate=0.001)
model.compile(optimizer=opt, loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])
model.summary()

checkpoint = ModelCheckpoint(
    "MODEL_CUSTOM_TEST.h5",
    monitor='val_accuracy',
    verbose=1,
    save_best_only=True,
    save_weights_only=False,
    mode='auto',
    save_freq='epoch'  
)

early = EarlyStopping(
    monitor='val_accuracy',
    min_delta=0,
    patience=20,
    verbose=1,
    mode='auto'
)


hist = model.fit(
    train_data,
    steps_per_epoch=100,
    validation_data=test_data,
    validation_steps=10,
    epochs=100,
    callbacks=[checkpoint, early]
)

plt.plot(hist.history["accuracy"])
plt.plot(hist.history['val_accuracy'])
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy","Validation Accuracy","loss","Validation Loss"])
plt.show()